/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package cinemafood;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author Ikechukwu
 */
public class CategoryFrame extends javax.swing.JFrame {
    
    private String category;

    /**
     * Creates new form CategoryView
     */
    public CategoryFrame(String category) {
        this.category = category;
        initComponents();
        jScrollPane1.setVisible(false);
        viewCartButton.setVisible(false);
        
        JLabel nameLabel = new JLabel("ITEM");
        JLabel priceLabel = new JLabel("PRICE");
        JLabel actionLabel = new JLabel("ACTION");
        gridPanel.add(nameLabel);
        gridPanel.add(priceLabel);
        gridPanel.add(actionLabel);
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        categoryLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        mainTable = new javax.swing.JTable();
        gridPanel = new javax.swing.JPanel();
        backButton = new javax.swing.JButton();
        viewCartButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("ADD TO CART");

        categoryLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        categoryLabel.setText("Category");

        mainTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item", "Price", "Action"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        mainTable.setRowHeight(40);
        jScrollPane1.setViewportView(mainTable);

        gridPanel.setBackground(new java.awt.Color(255, 255, 255));
        gridPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        gridPanel.setLayout(new java.awt.GridLayout(0, 3, 0, 10));

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        viewCartButton.setText("View Cart");
        viewCartButton.setOpaque(true);
        viewCartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewCartButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 122, Short.MAX_VALUE)
                        .addComponent(categoryLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 123, Short.MAX_VALUE)
                        .addComponent(viewCartButton)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(gridPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(28, 28, 28))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(categoryLabel)
                    .addComponent(backButton)
                    .addComponent(viewCartButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(gridPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(164, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void viewCartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewCartButtonActionPerformed
        // TODO add your handling code here:
        new CartFrame().setVisible(true);
    }//GEN-LAST:event_viewCartButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CategoryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CategoryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CategoryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CategoryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CategoryFrame(DataLoader.DRINKS).setVisible(true);
            }
        });
    }
    
    private void populateTable(){
//        DefaultTableModel model = (DefaultTableModel) mainTable.getModel();
        
        List<Food> foods;
        
        if (category.equalsIgnoreCase(DataLoader.DRINKS)) {
            categoryLabel.setText("Drinks");
            foods = DataLoader.loadDrinks();
        } else if (category.equalsIgnoreCase(DataLoader.CONFECTIONARY)){
            categoryLabel.setText("Confectionaries");
            foods = DataLoader.loadConfectionaries();
        }else{
            categoryLabel.setText("Snacks");
            foods = DataLoader.loadSnacks();
        }
        
        for (Food food : foods) {
            JLabel nameLabel = new JLabel(food.getName());
            JLabel priceLabel = new JLabel("£"+food.getPrice());
            CartButton cartButton = new CartButton();
            cartButton.setFood(food);
            cartButton.setCategory(category);
            cartButton.addActionListener(buttonListener);
            if (CartReader.isFoodInCart(food)) {
                cartButton.setIsAdded(true);
                cartButton.setText("Remove");
            }
            
            gridPanel.add(nameLabel);
            gridPanel.add(priceLabel);
            gridPanel.add(cartButton);
//            Object[] row = {food.getName(),"£"+food.getPrice()};
//            model.addRow(row);
        }
    }
    
    private ActionListener buttonListener = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            CartButton cartButton = (CartButton)e.getSource();
            if (!cartButton.isAdded()) {
//                        FOODS.add(addButton.getFood());

                if (CartReader.addToCart(cartButton.getFood())) {
                    JOptionPane.showMessageDialog(gridPanel,cartButton.getFood().getName()+" Added!");
                    cartButton.setText("Remove");
                    cartButton.setIsAdded(true);
                }

                return;
            }
//                    FOODS.remove(addButton.getFood());

            if (CartReader.removeFromCart(cartButton.getFood())) {
                JOptionPane.showMessageDialog(gridPanel,cartButton.getFood().getName()+" Removed!");
                cartButton.setText("Add to Cart");
                cartButton.setIsAdded(false);
            }
        }
    };
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JLabel categoryLabel;
    private javax.swing.JPanel gridPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable mainTable;
    private javax.swing.JButton viewCartButton;
    // End of variables declaration//GEN-END:variables
}
